use std::fmt::Display;

#[derive(Debug, Clone, Copy, PartialEq, Default)]
pub enum Token {
    OpenAngBrack,
    CloseAngBrack,
    OpenCurlBrack,
    CloseCurlBrack,
    CloseParenth,
    OpenParenth,
    Slash,
    Assign,
    Plus,
    Minus,
    Asterisk,
    AtSymbol,
    Identifier,
    For,
    In,
    If,
    Percent,
    Integer,
    Float,
    Period,
    Colon,
    Slot,
    EOF,
    #[default]
    Unknown,
    Pixels,
    Degrees,
    Radians,
    Comment,
    Comma,
    String,
    Hashtag,
    Range,
    Remainder,
    OpenSquareBrack,
    CloseSquareBrack,
    Eq,
    LessOrEq,
    MoreOrEq,
    Not,
    NotEq,
    VertLine,
    Or,
    Ampersand,
    And,
    Exp,
    PathSep,
    Bind,
}

impl Display for Token {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            Token::OpenAngBrack => "\"<\"",
            Token::CloseAngBrack => "\">\"",
            Token::OpenCurlBrack => "\"{\"",
            Token::CloseCurlBrack => "\"}\"",
            Token::CloseParenth => "\")\"",
            Token::OpenParenth => "\"(\"",
            Token::Slash => "\"/\"",
            Token::Assign => "\"=\"",
            Token::Plus => "\"+\"",
            Token::Minus => "\"-\"",
            Token::Asterisk => "\"*\"",
            Token::AtSymbol => "\"@\"",
            Token::Identifier => "identifier",
            Token::For => "for",
            Token::In => "in",
            Token::If => "if",
            Token::Percent => "\"%\"",
            Token::Integer => "integer",
            Token::Float => "float",
            Token::Period => "\".\"",
            Token::Colon => "\":\"",
            Token::Slot => "slot",
            Token::EOF => "end of line",
            Token::Unknown => "<UNKNOWN>",
            Token::Pixels => "px",
            Token::Degrees => "deg",
            Token::Radians => "rad",
            Token::Comment => "comment",
            Token::Comma => "\",\"",
            Token::String => "string",
            Token::Hashtag => "\"#\"",
            Token::Range => "\"..\"",
            Token::Remainder => "\"%%\" (remainder)",
            Token::OpenSquareBrack => "\"[\"",
            Token::CloseSquareBrack => "\"]\"",
            Token::Eq => "\"==\"",
            Token::LessOrEq => "\"<=\"",
            Token::MoreOrEq => "\">=\"",
            Token::Not => "\"!\"",
            Token::NotEq => "\"!=\"",
            Token::VertLine => "\"|\"",
            Token::Or => "\"||\"",
            Token::Ampersand => "\"&\"",
            Token::And => "\"&&\"",
            Token::Exp => "\"^\"",
            Token::PathSep => "\"::\"",
            Token::Bind => "binding",
        };
        write!(f, "{}", s)
    }
}
